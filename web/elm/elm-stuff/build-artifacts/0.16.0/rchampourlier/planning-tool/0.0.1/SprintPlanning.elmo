Elm.SprintPlanning = Elm.SprintPlanning || {};
Elm.SprintPlanning.make = function (_elm) {
   "use strict";
   _elm.SprintPlanning = _elm.SprintPlanning || {};
   if (_elm.SprintPlanning.values) return _elm.SprintPlanning.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Issue = Elm.Issue.make(_elm),
   $Issues = Elm.Issues.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $TeamMember = Elm.TeamMember.make(_elm),
   $TeamMemberList = Elm.TeamMemberList.make(_elm);
   var _op = {};
   var decodeIssue = A6($Json$Decode.object5,
   $Issue.init,
   A2($Json$Decode._op[":="],"key",$Json$Decode.string),
   A2($Json$Decode._op[":="],"summary",$Json$Decode.string),
   $Json$Decode.oneOf(_U.list([A2($Json$Decode._op[":="],"estimate",$Json$Decode.$int),$Json$Decode.succeed(0)])),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"developer",$Json$Decode.string)),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"reviewer",$Json$Decode.string)));
   var ModifyTeamMembers = function (a) {    return {ctor: "ModifyTeamMembers",_0: a};};
   var viewTeamMembers = F2(function (address,model) {
      return A2($TeamMemberList.view,A2($Signal.forwardTo,address,ModifyTeamMembers),model.teamMemberList);
   });
   var ModifyIssue = F2(function (a,b) {    return {ctor: "ModifyIssue",_0: a,_1: b};});
   var viewIssues = F4(function (address,label,issues,teamMemberNames) {
      var viewIssue = function (issue) {    return A3($Issue.view,A2($Signal.forwardTo,address,ModifyIssue(issue)),issue,teamMemberNames);};
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h3,_U.list([]),_U.list([$Html.text(label)]))
              ,A2($Html.table,
              _U.list([$Html$Attributes.$class("mui-table issues-list")]),
              _U.list([A2($Html.thead,
                      _U.list([]),
                      _U.list([A2($Html.tr,
                      _U.list([]),
                      _U.list([A2($Html.th,_U.list([]),_U.list([$Html.text("Issue")]))
                              ,A2($Html.th,_U.list([]),_U.list([$Html.text("Estimate")]))
                              ,A2($Html.th,_U.list([]),_U.list([$Html.text("Developer")]))
                              ,A2($Html.th,_U.list([]),_U.list([$Html.text("Reviewer")]))]))]))
                      ,A2($Html.tbody,_U.list([]),A2($List.map,viewIssue,issues))]))]));
   });
   var ReceivedIssues = function (a) {    return {ctor: "ReceivedIssues",_0: a};};
   var getIssues = function (jqlQuery) {
      var url_base = "http://api.sprint-planning.dev/issues";
      var url = A2($Http.url,url_base,_U.list([]));
      return $Effects.task(A2($Task.map,ReceivedIssues,$Task.toMaybe(A2($Http.get,$Json$Decode.list(decodeIssue),url))));
   };
   var getIssuesForStatus = F2(function (status,model) {
      var _p0 = status;
      if (_p0.ctor === "TODO") {
            return A2($List.filter,function (i) {    return _U.eq(i.developerName,$Maybe.Nothing) || _U.eq(i.reviewerName,$Maybe.Nothing);},model.issues);
         } else {
            return A2($List.filter,function (i) {    return !_U.eq(i.developerName,$Maybe.Nothing) && !_U.eq(i.reviewerName,$Maybe.Nothing);},model.issues);
         }
   });
   var sumEstimates = function (issues) {
      return A3($List.foldl,F2(function (x,y) {    return x + y;}),0,A2($List.map,function (i) {    return i.estimate;},issues));
   };
   var calculateAssignmentForNameAndRole = F3(function (issues,teamMemberName,role) {
      var is = F2(function (role,issue) {
         var maybeName = function () {
            var _p1 = role;
            if (_p1.ctor === "Developer") {
                  return issue.developerName;
               } else {
                  return issue.reviewerName;
               }
         }();
         var _p2 = maybeName;
         if (_p2.ctor === "Nothing") {
               return false;
            } else {
               return _U.eq(_p2._0,teamMemberName);
            }
      });
      return sumEstimates(A2($List.filter,is(role),issues));
   });
   var getAssignmentsForName = F2(function (issues,name) {
      return A2($List.map,
      function (role) {
         return {ctor: "_Tuple2",_0: role,_1: A3(calculateAssignmentForNameAndRole,issues,name,role)};
      },
      _U.list([$TeamMember.Developer,$TeamMember.Reviewer]));
   });
   var getAssignments = F2(function (issues,teamMemberNames) {
      return A2($List.map,function (name) {    return {ctor: "_Tuple2",_0: name,_1: A2(getAssignmentsForName,issues,name)};},teamMemberNames);
   });
   var updateWithIssues = F2(function (model,issues) {
      var teamMemberList = function () {
         var _p3 = model.teamMemberList;
         if (_p3.ctor === "[]") {
               return $TeamMemberList.init($Set.toList($Issues.teamMembersNames(issues)));
            } else {
               return model.teamMemberList;
            }
      }();
      var teamMemberNames = $TeamMemberList.getNames(teamMemberList);
      var updatedTeamMemberList = A2($TeamMemberList.updateAssignments,teamMemberList,A2(getAssignments,issues,teamMemberNames));
      return _U.update(model,{issues: issues,teamMemberList: updatedTeamMemberList});
   });
   var update = F2(function (action,model) {
      var _p4 = action;
      switch (_p4.ctor)
      {case "ReceivedIssues": var _p5 = _p4._0;
           if (_p5.ctor === "Nothing") {
                 return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
              } else {
                 var _p6 = _p5._0;
                 var teamMemberList = $TeamMemberList.init($Set.toList($Issues.teamMembersNames(_p6)));
                 return {ctor: "_Tuple2",_0: A2(updateWithIssues,model,_p6),_1: $Effects.none};
              }
         case "ModifyIssue": var _p7 = _p4._0;
           var updateIssue = function (i) {    return _U.eq(i,_p7) ? A3($Issue.update,_p4._1,_p7,model.draggedTeamMemberName) : i;};
           var issues = A2($List.map,updateIssue,model.issues);
           return {ctor: "_Tuple2",_0: A2(updateWithIssues,model,issues),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: _U.update(model,{teamMemberList: A2($TeamMemberList.update,_p4._0,model.teamMemberList)}),_1: $Effects.none};}
   });
   var Model = F3(function (a,b,c) {    return {issues: a,teamMemberList: b,draggedTeamMemberName: c};});
   var init = {ctor: "_Tuple2",_0: A3(Model,_U.list([]),$TeamMemberList.init(_U.list([])),$Maybe.Nothing),_1: getIssues("PROJECT = \"JT\"")};
   var DONE = {ctor: "DONE"};
   var TODO = {ctor: "TODO"};
   var view = F2(function (address,model) {
      var teamMemberNames = $TeamMemberList.getNames(model.teamMemberList);
      var issuesDone = A2(getIssuesForStatus,DONE,model);
      var issuesTodo = A2(getIssuesForStatus,TODO,model);
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("sprint-planning")]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("issues-box box mui-panel mui-col-md-8")]),
              _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Issues")]))
                      ,A2($Html.div,_U.list([]),_U.list([A4(viewIssues,address,"TODO",issuesTodo,teamMemberNames)]))
                      ,A2($Html.div,_U.list([]),_U.list([A4(viewIssues,address,"DONE",issuesDone,teamMemberNames)]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("team-members-box box mui-panel mui-col-md-4")]),
              _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Team Members")])),A2(viewTeamMembers,address,model)]))]));
   });
   return _elm.SprintPlanning.values = {_op: _op
                                       ,TODO: TODO
                                       ,DONE: DONE
                                       ,Model: Model
                                       ,init: init
                                       ,getAssignments: getAssignments
                                       ,getAssignmentsForName: getAssignmentsForName
                                       ,calculateAssignmentForNameAndRole: calculateAssignmentForNameAndRole
                                       ,sumEstimates: sumEstimates
                                       ,getIssuesForStatus: getIssuesForStatus
                                       ,ReceivedIssues: ReceivedIssues
                                       ,ModifyIssue: ModifyIssue
                                       ,ModifyTeamMembers: ModifyTeamMembers
                                       ,update: update
                                       ,updateWithIssues: updateWithIssues
                                       ,view: view
                                       ,viewIssues: viewIssues
                                       ,viewTeamMembers: viewTeamMembers
                                       ,getIssues: getIssues
                                       ,decodeIssue: decodeIssue};
};