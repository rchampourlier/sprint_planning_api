Elm.EditableLabel = Elm.EditableLabel || {};
Elm.EditableLabel.make = function (_elm) {
   "use strict";
   _elm.EditableLabel = _elm.EditableLabel || {};
   if (_elm.EditableLabel.values) return _elm.EditableLabel.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm);
   var _op = {};
   var UpdateValue = function (a) {    return {ctor: "UpdateValue",_0: a};};
   var LeaveEdit = {ctor: "LeaveEdit"};
   var EnterEdit = {ctor: "EnterEdit"};
   var viewDisplay = F2(function (address,model) {
      return A2($Html.span,
      _U.list([A2($Html$Events.onDoubleClick,address,EnterEdit)]),
      _U.list([A2($Html.input,
      _U.list([$Html$Attributes.$class("editable-label"),$Html$Attributes.disabled(true),$Html$Attributes.value(model.value)]),
      _U.list([]))]));
   });
   var DoNothing = {ctor: "DoNothing"};
   var viewEdit = F2(function (address,model) {
      var actionForKey = function (key) {    var _p0 = key;if (_p0 === 13) {    return LeaveEdit;} else {    return DoNothing;}};
      return A2($Html.span,
      _U.list([]),
      _U.list([A2($Html.input,
      _U.list([$Html$Attributes.$class("editable-label")
              ,$Html$Attributes.value(model.value)
              ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (str) {    return A2($Signal.message,address,UpdateValue(str));})
              ,A2($Html$Events.onKeyPress,address,actionForKey)
              ,$Html$Attributes.disabled(false)]),
      _U.list([]))]));
   });
   var view = F2(function (address,model) {
      var _p1 = model.state;
      if (_p1.ctor === "Display") {
            return A2(viewDisplay,address,model);
         } else {
            return A2(viewEdit,address,model);
         }
   });
   var getValue = function (model) {    return model.value;};
   var Model = F2(function (a,b) {    return {value: a,state: b};});
   var Edit = {ctor: "Edit"};
   var Display = {ctor: "Display"};
   var init = function (value) {    return A2(Model,value,Display);};
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "EnterEdit": return _U.update(model,{state: Edit});
         case "LeaveEdit": return _U.update(model,{state: Display});
         case "UpdateValue": return _U.update(model,{value: _p2._0});
         default: return model;}
   });
   var main = $StartApp$Simple.start({model: init("value"),view: view,update: update});
   return _elm.EditableLabel.values = {_op: _op
                                      ,main: main
                                      ,Display: Display
                                      ,Edit: Edit
                                      ,Model: Model
                                      ,init: init
                                      ,getValue: getValue
                                      ,DoNothing: DoNothing
                                      ,EnterEdit: EnterEdit
                                      ,LeaveEdit: LeaveEdit
                                      ,UpdateValue: UpdateValue
                                      ,update: update
                                      ,view: view
                                      ,viewDisplay: viewDisplay
                                      ,viewEdit: viewEdit};
};