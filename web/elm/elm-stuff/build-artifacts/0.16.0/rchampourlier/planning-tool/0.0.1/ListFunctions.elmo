Elm.ListFunctions = Elm.ListFunctions || {};
Elm.ListFunctions.make = function (_elm) {
   "use strict";
   _elm.ListFunctions = _elm.ListFunctions || {};
   if (_elm.ListFunctions.values) return _elm.ListFunctions.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var indexList = F2(function (startIndex,list) {
      var _p0 = list;
      if (_p0.ctor === "::") {
            return A2($List._op["::"],{ctor: "_Tuple2",_0: startIndex,_1: _p0._0},A2(indexList,startIndex + 1,_p0._1));
         } else {
            return _U.list([]);
         }
   });
   var substract = F2(function (list1,list2) {    return A2($List.filter,function (i) {    return $Basics.not(A2($List.member,i,list2));},list1);});
   return _elm.ListFunctions.values = {_op: _op,substract: substract,indexList: indexList};
};