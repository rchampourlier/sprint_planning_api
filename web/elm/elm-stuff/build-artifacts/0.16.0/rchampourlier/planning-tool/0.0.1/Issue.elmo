Elm.Issue = Elm.Issue || {};
Elm.Issue.make = function (_elm) {
   "use strict";
   _elm.Issue = _elm.Issue || {};
   if (_elm.Issue.values) return _elm.Issue.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $MoreHtmlEvents = Elm.MoreHtmlEvents.make(_elm),
   $Mui = Elm.Mui.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var update = F3(function (action,model,maybeTeamMemberName) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "DragOver": return model;
         case "DropAndAssign": var _p1 = _p0._0;
           if (_p1.ctor === "Developer") {
                 return _U.update(model,{developerName: maybeTeamMemberName});
              } else {
                 return _U.update(model,{reviewerName: maybeTeamMemberName});
              }
         case "Assign": var selectedTeamMemberName = $Mui.selectedID(_p0._1);
           var _p2 = _p0._0;
           if (_p2.ctor === "Developer") {
                 return _U.update(model,{developerName: selectedTeamMemberName});
              } else {
                 return _U.update(model,{reviewerName: selectedTeamMemberName});
              }
         default: var _p3 = _p0._0;
           if (_p3.ctor === "Developer") {
                 return _U.update(model,{developerName: $Maybe.Nothing});
              } else {
                 return _U.update(model,{reviewerName: $Maybe.Nothing});
              }}
   });
   var Unassign = function (a) {    return {ctor: "Unassign",_0: a};};
   var Assign = F2(function (a,b) {    return {ctor: "Assign",_0: a,_1: b};});
   var DropAndAssign = function (a) {    return {ctor: "DropAndAssign",_0: a};};
   var DragOver = function (a) {    return {ctor: "DragOver",_0: a};};
   var init = F5(function (key,summary,estimate,maybeDeveloperName,maybeReviewerName) {
      return {key: key,summary: summary,estimate: estimate,developerName: maybeDeveloperName,reviewerName: maybeReviewerName};
   });
   var Model = F5(function (a,b,c,d,e) {    return {key: a,summary: b,estimate: c,developerName: d,reviewerName: e};});
   var Reviewer = {ctor: "Reviewer"};
   var Developer = {ctor: "Developer"};
   var view = F3(function (address,model,teamMemberNames) {
      var options = A2($List.map,function (n) {    return {ctor: "_Tuple2",_0: n,_1: n};},teamMemberNames);
      return A2($Html.tr,
      _U.list([$Html$Attributes.$class("issue-item"),$Html$Attributes.key(model.key)]),
      _U.list([A2($Html.td,
              _U.list([]),
              _U.list([A2($Html.strong,_U.list([]),_U.list([$Html.text(model.key)]))
                      ,A2($Html.span,_U.list([$Html$Attributes.$class("issue-item__summary")]),_U.list([$Html.text(model.summary)]))]))
              ,A2($Html.td,_U.list([]),_U.list([$Html.text($Basics.toString(model.estimate))]))
              ,A2($Html.td,
              _U.list([A2($MoreHtmlEvents.onDragOver,address,DragOver(Developer)),A2($MoreHtmlEvents.onDrop,address,DropAndAssign(Developer))]),
              _U.list([A4($Mui.selectBox,A2($Signal.forwardTo,address,Assign(Developer)),"None",options,model.developerName)]))
              ,A2($Html.td,
              _U.list([A2($MoreHtmlEvents.onDragOver,address,DragOver(Reviewer)),A2($MoreHtmlEvents.onDrop,address,DropAndAssign(Reviewer))]),
              _U.list([A4($Mui.selectBox,A2($Signal.forwardTo,address,Assign(Reviewer)),"None",options,model.reviewerName)]))]));
   });
   return _elm.Issue.values = {_op: _op,init: init,update: update,view: view,Model: Model};
};