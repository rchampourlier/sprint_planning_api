Elm.Issues = Elm.Issues || {};
Elm.Issues.make = function (_elm) {
   "use strict";
   _elm.Issues = _elm.Issues || {};
   if (_elm.Issues.values) return _elm.Issues.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Issue = Elm.Issue.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var teamMembersNames = function (issues) {
      var insertMaybeName = F2(function (maybeName,names) {
         var _p0 = maybeName;
         if (_p0.ctor === "Nothing") {
               return names;
            } else {
               return A2($Set.insert,_p0._0,names);
            }
      });
      var _p1 = issues;
      if (_p1.ctor === "::") {
            var _p2 = _p1._0;
            return A2(insertMaybeName,_p2.reviewerName,A2(insertMaybeName,_p2.developerName,teamMembersNames(_p1._1)));
         } else {
            return $Set.empty;
         }
   };
   return _elm.Issues.values = {_op: _op,teamMembersNames: teamMembersNames};
};