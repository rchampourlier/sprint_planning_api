Elm.IndexedList = Elm.IndexedList || {};
Elm.IndexedList.make = function (_elm) {
   "use strict";
   _elm.IndexedList = _elm.IndexedList || {};
   if (_elm.IndexedList.values) return _elm.IndexedList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var append = F2(function (list,newValue) {
      var _p0 = list;
      if (_p0.ctor === "[]") {
            return _U.list([{ctor: "_Tuple2",_0: 0,_1: newValue}]);
         } else {
            if (_p0._1.ctor === "[]") {
                  var _p1 = _p0._0;
                  var _p2 = _p1._0;
                  return A2($Basics._op["++"],_U.list([{ctor: "_Tuple2",_0: _p2,_1: _p1._1}]),_U.list([{ctor: "_Tuple2",_0: _p2 + 1,_1: newValue}]));
               } else {
                  return A2($Basics._op["++"],_U.list([_p0._0]),A2(append,_p0._1,newValue));
               }
         }
   });
   return _elm.IndexedList.values = {_op: _op,append: append};
};